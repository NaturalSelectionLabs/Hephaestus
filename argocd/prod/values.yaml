global:
  podAnnotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "metrics"
    prometheus.io/scrape: "true"
redis:
  # -- Enable redis
  enabled: false
externalRedis:
  host: 10.1.40.3
#  existingSecret: argocd-redis
controller:
  replicas: 3
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd@naturalselectionlabs.iam.gserviceaccount.com
  metrics:
    # -- Deploy metrics service
    enabled: true
    rules:
      enabled: true
      spec:
        - alert: ArgocdServiceNotSynced
          expr: argocd_app_info{sync_status!="Synced"} != 0
          for: 15m
          labels:
            severity: warning
          annotations:
            summary: ArgoCD service not synced (instance {{ $labels.instance }})
            description: "Service {{ $labels.name }} run by argo is currently not in sync.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
        - alert: ArgocdServiceUnhealthy
          expr: argocd_app_info{health_status!="Healthy"} != 0
          for: 15m
          labels:
            severity: warning
          annotations:
            summary: ArgoCD service unhealthy (instance {{ $labels.instance }})
            description: "Service {{ $labels.name }} run by argo is currently not healthy.\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"
server:
  resources:
    requests:
      cpu: 0.1
      memory: 256Mi
    limits:
      cpu: 0.5
      memory: 512Mi
  autoscaling:
    enabled: true
    minReplicas: 2
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd@naturalselectionlabs.iam.gserviceaccount.com
repoServer:
  resources:
    requests:
      cpu: 0.5
      memory: 512Mi
    limits:
      cpu: 1
      memory: 1Gi
  autoscaling:
    enabled: true
    minReplicas: 5
    maxReplicas: 10
  rbac:
    - verbs:
        - get
        - list
        - watch
      apiGroups:
        - ''
      resources:
        - secrets
        - configmaps
  initContainers:
    - name: download-tools
      image: registry.access.redhat.com/ubi8
      env:
        - name: AVP_VERSION
          value: 1.16.1
      command: [sh, -c]
      args:
        - >-
          curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd@naturalselectionlabs.iam.gserviceaccount.com
  extraContainers:
    # argocd-vault-plugin with plain YAML
    - name: avp-kustomize
      command:
      - /var/run/argocd/argocd-cmp-server
      - --loglevel
      - debug
      image: quay.io/argoproj/argocd:v2.8.4
      resources:
        requests:
          cpu: 0.2
          memory: 256Mi
        limits:
          cpu: 0.5
          memory: 512Mi
      env:
        - name: AVP_SECRET
          value: guardian:avp-prod
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: avp-kustomize.yaml
          name: cmp-plugin
        - name: custom-tools
          subPath: argocd-vault-plugin
          mountPath: /usr/local/bin/argocd-vault-plugin
  volumes:
    - configMap:
        name: argocd-cmp-cm
      name: cmp-plugin
    - name: custom-tools
      emptyDir: {}
applicationSet:
  replicas: 2
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd@naturalselectionlabs.iam.gserviceaccount.com
configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    url: "https://argocd.naturalselectionlabs.com"
    accounts.github: apiKey
    exec.enabled: "true"
    statusbadge.enabled: "true"
    dex.config: |
      connectors:
      # GitHub example
        - type: oidc
          id: keycloak
          name: NSL
          config:
            issuer: https://account.nsl.xyz/auth/realms/google
            clientID: argocd
            clientSecret: $oidc.keycloak.clientSecret
            redirectURI: https://argocd.naturalselectionlabs.com/dex/callback
            scopes:
              - openid
              - profile
              - email
            insecureSkipEmailVerified: true
            insecureEnableGroups: true
            userIDKey: email
            userNameKey: email
    # OIDC configuration as an alternative to dex (optional).
#    oidc.config: |
#      name: Keycloak
#      issuer: https://account.nsl.xyz/auth/realms/google
#      clientID: argocd
#      clientSecret: $oidc.keycloak.clientSecret
#      requestedScopes: ["email"]
    #   rootCA: |
    #     -----BEGIN CERTIFICATE-----
    #     ... encoded certificate data here ...
    #     -----END CERTIFICATE-----
    #   requestedIDTokenClaims:
    #     groups:
    #       essential: true
    #   requestedScopes:
    #     - openid
    #     - profile
    #     - email
    resource.customizations.ignoreDifferences.apps_Deployment: |
      jqPathExpressions:
      - .spec.template.spec.initContainers[].resources
  params:
    server.insecure: true
    reposerver.enable.git.submodule: false

  # ConfigMap for Config Management Plugins
  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
  cmp:
    create: true
    plugins:
      avp-kustomize:
        allowConcurrency: true
        discover:
          find:
            command:
              - sh
              - "-c"
              - "find . -name kustomization.yaml"
        generate:
          command:
            - sh
            - "-c"
            - "kustomize edit set annotation \"github.com/url:${ARGOCD_ENV_APP_REPO}\"; kustomize edit set image ${ARGOCD_ENV_IMAGE_NAME}:${ARGOCD_ENV_IMAGE_TAG}; kustomize build --enable-helm . | argocd-vault-plugin -s ${ARGOCD_ENV_AVP_SECRET} generate -"
        lockRepo: false
  rbac:
    # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
    # If false, it is expected the configmap will be created by something else.
    # Argo CD will not work if there is no configmap created with the name above.
    create: true

    # -- Annotations to be added to argocd-rbac-cm configmap
    annotations: { }

    # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
    # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
    policy.default: 'role:readonly'

    # -- File containing user-defined policies and role definitions.
    # @default -- `''` (See [values.yaml])
    policy.csv: |
      p, role:org-admin, applications, *, */*, allow
      p, role:org-admin, clusters, get, *, allow
      p, role:org-admin, repositories, *, *, allow
      p, role:org-admin, logs, get, *, allow
      p, role:org-admin, exec, create, */*, allow
      p, role:network, applications, *, network/*, allow
      p, role:network, logs, *, network/*, allow
      p, role:network, exec, *, network/*, allow
      p, role:pregod, applications, *, pregod/*, allow
      p, role:pregod, logs, *, pregod/*, allow
      p, role:pregod, exec, *, pregod/*, allow
      p, role:copilot, applications, *, copilot/*, allow
      p, role:copilot, logs, *, copilot/*, allow
      p, role:copilot, exec, *, copilot/*, allow
      p, role:ai, applications, *, ai/*, allow
      p, role:ai, logs, *, ai/*, allow
      p, role:ai, exec, *, ai/*, allow
      p, role:crossbell, applications, *, crossbell/*, allow
      p, role:crossbell, logs, *, crossbell/*, allow
      p, role:crossbell, exec, *, crossbell/*, allow
      g, admin, role:org-admin
      g, github, role:org-admin
      g, devops, role:org-admin
      g, network, role:pregod
      g, network, role:network
      g, aiop, role:pregod
      g, aiop, role:copilot
      g, aiop, role:ai
      g, crossbell, role:crossbell

    # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
    # The scope value can be a string, or a list of strings.
    scopes: "[groups]"