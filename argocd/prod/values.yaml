global:
  logging:
    format: json
  domain: argocd.naturalselectionlabs.com
redis:
  # -- Enable redis
  enabled: false
externalRedis:
  host: r-7goqq5xexvafy15m2q.redis.rds.aliyuncs.com
#  existingSecret: argocd-redis
controller:
  replicas: 3
  resources:
    requests:
      cpu: 4
      memory: 4Gi
    limits:
      cpu: 4
      memory: 4Gi
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd@naturalselectionlabs.iam.gserviceaccount.com
  env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: "/etc/workload-identity/credential-configuration.json"
  volumeMounts:
    - name: token
      mountPath: "/var/run/service-account"
      readOnly: true
    - name: workload-identity-credential-configuration
      mountPath: "/etc/workload-identity"
      readOnly: true
  volumes:
    - name: token
      projected:
        sources:
          - serviceAccountToken:
              audience: https://iam.googleapis.com/projects/987979088361/locations/global/workloadIdentityPools/kubernetes/providers/aliyun-common
              expirationSeconds: 3600
              path: token
    - name: workload-identity-credential-configuration
      configMap:
        name: gcp-credential
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
    rules:
      enabled: true
      spec:
        - alert: ArgocdServiceNotSynced
          expr: argocd_app_info{autosync_enabled="true",sync_status!="Synced"} != 0
          for: 15m
          labels:
            severity: warning
          annotations:
            summary: ArgoCD service not synced (instance {{ $labels.instance }})
            description: "Service {{ $labels.name }} run by argo is currently not in sync.\n"
            link_text: "App :argo:"
            link_url: "https://argocd.naturalselectionlabs.com/applications/{{ $labels.name }}"
            runbook_url: "https://www.notion.so/rss3/ArgocdServiceNotSynced-20de749db2854da1b11eb76a9d284592?pvs=4"
        - alert: ArgocdServiceUnhealthy
          expr: argocd_app_info{health_status!="Healthy"} != 0
          for: 15m
          labels:
            severity: warning
          annotations:
            summary: ArgoCD service unhealthy (instance {{ $labels.instance }})
            description: "Service {{ $labels.name }} run by argo is currently not healthy.\n"
            link_text: "App :argo:"
            link_url: "https://argocd.naturalselectionlabs.com/applications/{{ $labels.name }}"
            runbook_url: "https://www.notion.so/rss3/ArgocdServiceUnhealthy-6401fb2e538a46e2b0a0ef836f0d3d86?pvs=4"
server:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  ingress:
    # -- Enable an ingress resource for the Argo CD server
    enabled: true
    ingressClassName: "alb"
    annotations:
      cert-manager.io/cluster-issuer: "cloudflare"
      # alb.ingress.kubernetes.io/healthcheck-enabled: "true"
      alb.ingress.kubernetes.io/backend-protocol: "grpc"
    tls: true
  ingressGrpc:
    # -- Enable an ingress resource for the Argo CD server for dedicated [gRPC-ingress]
    enabled: false
    # -- Additional ingress annotations for dedicated [gRPC-ingress]
    annotations: {}
  resources:
    requests:
      cpu: 0.25
      memory: 1Gi
    limits:
      cpu: 0.25
      memory: 1Gi
  autoscaling:
    enabled: true
    minReplicas: 2
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd@naturalselectionlabs.iam.gserviceaccount.com
repoServer:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  resources:
    requests:
      cpu: 1
      memory: 2Gi
    limits:
      cpu: 1
      memory: 2Gi
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 7
  rbac:
    - verbs:
        - get
        - list
        - watch
      apiGroups:
        - ""
      resources:
        - secrets
        - configmaps
  clusterRoleRules:
    # -- Enable custom rules for the Repo server's Cluster Role resource
    enabled: true
    # -- List of custom rules for the Repo server's Cluster Role resource
    rules: []
  initContainers:
    - name: download-tools
      image: redhat/ubi8
      env:
        - name: AVP_VERSION
          value: 1.16.1
      command: [sh, -c]
      args:
        - >-
          curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd@naturalselectionlabs.iam.gserviceaccount.com
  extraContainers:
    # argocd-vault-plugin with plain YAML
    - name: avp-kustomize
      command:
        - /var/run/argocd/argocd-cmp-server
        - --loglevel
        - debug
        - --logformat
        - json
      image: quay.io/argoproj/argocd:v2.13.3
      resources:
        requests:
          cpu: "0.25"
          memory: 1Gi
        limits:
          cpu: "0.25"
          memory: 1Gi
      env:
        - name: AVP_SECRET
          value: guardian:avp-prod
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: avp-kustomize.yaml
          name: cmp-plugin
        - name: custom-tools
          subPath: argocd-vault-plugin
          mountPath: /usr/local/bin/argocd-vault-plugin
  volumes:
    - configMap:
        name: argocd-cmp-cm
      name: cmp-plugin
    - name: custom-tools
      emptyDir: {}
applicationSet:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  replicas: 2
  serviceAccount:
    annotations:
      iam.gke.io/gcp-service-account: argocd@naturalselectionlabs.iam.gserviceaccount.com
dex:
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    url: "https://argocd.naturalselectionlabs.com"
    accounts.github: apiKey
    exec.enabled: "true"
    statusbadge.enabled: true
    controller.kubectl.parallelism.limit: "10"
    controller.status.processors: "50"
    controller.operation.processors: "25"
    kustomize.buildOptions: --enable-helm
    dex.config: |
      connectors:
        - type: oidc
          id: keycloak
          name: NSL
          config:
            issuer: https://account.naturalselectionlabs.com/auth/realms/google
            clientID: argocd
            clientSecret: $oidc.keycloak.clientSecret
            redirectURI: https://argocd.naturalselectionlabs.com/dex/callback
            scopes:
              - "openid"
              - "profile"
              - "email"
              - "roles"
            insecureSkipEmailVerified: true
            insecureEnableGroups: true
            userIDKey: email
            userNameKey: email
    # OIDC configuration as an alternative to dex (optional).
    #    oidc.config: |
    #      name: nsl
    #      issuer: https://account.naturalselectionlabs.com/auth/realms/google
    #      clientID: argocd
    #      clientSecret: $oidc.keycloak.clientSecret
    #      requestedScopes: ["openid", "profile", "email", "roles"]
    #   rootCA: |
    #     -----BEGIN CERTIFICATE-----
    #     ... encoded certificate data here ...
    #     -----END CERTIFICATE-----
    #   requestedIDTokenClaims:
    #     groups:
    #       essential: true
    #   requestedScopes:
    #     - openid
    #     - profile
    #     - email
    #    resource.customizations.ignoreDifferences.all: |
    #      managedFieldsManagers:
    #      - kube-controller-manager
    #      jqPathExpressions:
    #      - .spec.replicas
    resource.customizations.ignoreDifferences.apps_Deployment: |
      jqPathExpressions:
      - .spec.template.spec.initContainers[].resources
    resource.compareoptions: |
      # disables status field diffing in specified resource types
      # 'crd' - CustomResourceDefinitions (default)
      # 'all' - all resources
      # 'none' - disabled
      ignoreResourceStatusField: crd
  params:
    server.insecure: true
    reposerver.enable.git.submodule: false
  secret:
    # -- Create the argocd-secret
    createSecret: false
  # ConfigMap for Config Management Plugins
  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/config-management-plugins/
  cmp:
    create: true
    plugins:
      avp-kustomize:
        allowConcurrency: true
        discover:
          find:
            command:
              - sh
              - "-c"
              - "find . -name kustomization.yaml"
        generate:
          command:
            - sh
            - "-c"
            - 'kustomize edit set annotation "github.com/url:${ARGOCD_ENV_APP_REPO}"; kustomize edit set image ${ARGOCD_ENV_IMAGE_NAME}:${ARGOCD_ENV_IMAGE_TAG}; kustomize build --enable-helm . | argocd-vault-plugin -s ${ARGOCD_ENV_AVP_SECRET} generate -'
        lockRepo: false
  rbac:
    # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
    # If false, it is expected the configmap will be created by something else.
    # Argo CD will not work if there is no configmap created with the name above.
    create: true

    # -- Annotations to be added to argocd-rbac-cm configmap
    annotations: {}

    # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
    # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
    policy.default: "role:readonly"

    # -- File containing user-defined policies and role definitions.
    # @default -- `''` (See [values.yaml])
    policy.csv: |
      p, role:org-admin, applications, *, */*, allow
      p, role:org-admin, applicationsets, *, */*, allow
      p, role:org-admin, clusters, get, *, allow
      p, role:org-admin, repositories, *, *, allow
      p, role:org-admin, logs, get, *, allow
      p, role:org-admin, exec, create, */*, allow
      p, role:network, applications, *, network/*, allow
      p, role:network, logs, *, network/*, allow
      p, role:network, exec, *, network/*, allow
      p, role:pregod, applications, *, pregod/*, allow
      p, role:pregod, logs, *, pregod/*, allow
      p, role:pregod, exec, *, pregod/*, allow
      p, role:copilot, applications, *, copilot/*, allow
      p, role:copilot, logs, *, copilot/*, allow
      p, role:copilot, exec, *, copilot/*, allow
      p, role:ai, applications, *, ai/*, allow
      p, role:ai, logs, *, ai/*, allow
      p, role:ai, exec, *, ai/*, allow
      p, role:follow, applications, *, follow/*, allow
      p, role:follow, logs, *, follow/*, allow
      p, role:follow, exec, *, follow/*, allow
      p, role:crossbell, applications, *, crossbell/*, allow
      p, role:crossbell, logs, *, crossbell/*, allow
      p, role:crossbell, exec, *, crossbell/*, allow
      p, role:diygod, applications, *, diygod/*, allow
      p, role:diygod, logs, *, diygod/*, allow
      p, role:diygod, exec, *, diygod/*, allow
      p, role:open, applications, *, open/*, allow
      p, role:open, logs, *, open/*, allow
      p, role:open, exec, *, open/*, allow
      p, role:overlord, applications, *, overlord/*, allow
      p, role:overlord, logs, *, overlord/*, allow
      p, role:overlord, exec, *, overlord/*, allow
      g, admin, role:org-admin
      g, github, role:org-admin
      g, devops, role:org-admin
      g, network, role:pregod
      g, network, role:network
      g, aiop, role:pregod
      g, aiop, role:copilot
      g, aiop, role:ai
      g, crossbell, role:crossbell
      g, diygod, role:diygod
      g, follow, role:follow
      g, open, role:open
      g, overlord, role:overlord

    # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
    # The scope value can be a string, or a list of strings.
    scopes: "[groups]"

  styles: |
    img.sidebar__logo__character {
       width: 60px !important;
       content: url("https://avatars.githubusercontent.com/u/152575164?s=200&v=4") !important;
    }
