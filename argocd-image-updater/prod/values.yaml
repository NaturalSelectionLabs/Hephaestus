metrics:
  # -- Deploy metrics service
  enabled: true
  service:
    # -- Metrics service annotations
    annotations: {}
    # -- Metrics service labels
    labels: {}
    # -- Metrics service port
    servicePort: 8081
  serviceMonitor:
    # -- Enable a prometheus ServiceMonitor
    enabled: true
    # -- Prometheus ServiceMonitor interval
    interval: 30s
    # -- Prometheus [RelabelConfigs] to apply to samples before scraping
    relabelings: []
    # -- Prometheus [MetricRelabelConfigs] to apply to samples before ingestion
    metricRelabelings: []
    # -- Prometheus ServiceMonitor selector
    selector: {}
    # promtheus: kube-prometheus

    # -- Prometheus ServiceMonitor namespace
    namespace: ""
    # -- Prometheus ServiceMonitor labels
    additionalLabels: {}
extraArgs:
  # - --disable-kubernetes
  # - --dry-run
  # - --health-port
  # - 8080
  - --interval
  - 5m
# - --kubeconfig
# - ~/.kube/config
# - --match-application-name
# - staging-*
# - --max-concurrency
# - 5
# - --once
# - --registries-conf-path
# - /app/config/registries.conf
config:
  registries:
    - name: Docker Hub
      api_url: https://registry-1.docker.io
      ping: yes
      credentials: pullsecret:argo/dockerhub-secret
      defaultns: library
      limit: 10
    - name: Google Artifact Registry(us-central1)
      api_url: https://us-central1-docker.pkg.dev
      prefix: us-central1-docker.pkg.dev
      credentials: ext:/scripts/gke-workload-identity-auth.sh
      credsexpire: 10m
      limit: 5
    - name: Alibaba Cloud Container Registry
      api_url: https://container-registry-vpc.us-east-1.cr.aliyuncs.com
      prefix: container-registry-vpc.us-east-1.cr.aliyuncs.com
      credentials: ext:/scripts/aliyun-auth.sh
    # - name: Google Container Registry
    #   api_url: https://gcr.io
    #   prefix: gcr.io
    #   ping: no
    #   credentials: pullsecret:foo/bar
    # - name: RedHat Quay
    #   api_url: https://quay.io
    #   ping: no
    #   prefix: quay.io
    #   credentials: env:REGISTRY_SECRET
    # - name: ECR
    #   api_url: https://123456789.dkr.ecr.eu-west-1.amazonaws.com
    #   prefix: 123456789.dkr.ecr.eu-west-1.amazonaws.com
    #   ping: yes
    #   insecure: no
  #   credentials: ext:/scripts/auth1.sh
  #   credsexpire: 10h

initContainers:
  - name: init-gcloud
    image: gcr.io/google.com/cloudsdktool/cloud-sdk:543.0.0-alpine
    command: ["sh", "-c", "cp -R /google-cloud-sdk /shared-cli"]
    volumeMounts:
      - name: shared-cli
        mountPath: /shared-cli
  # install kubectl and jq
  - name: init-tools
    image: quay.io/curl/curl:8.16.0
    command: ["/bin/sh", "-c"]
    args:
      - |
        curl -SLO https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl
        chmod +x kubectl
        curl -SLO https://github.com/stedolan/jq/releases/download/jq-1.7/jq-linux64
        chmod +x jq-linux64 && mv jq-linux64 jq
        mv kubectl jq /shared-cli
    volumeMounts:
      - name: shared-cli
        mountPath: /shared-cli

authScripts:
  enabled: true
  scripts:
    gke-workload-identity-auth.sh: |
      #!/bin/sh
      /shared-cli/google-cloud-sdk/bin/gcloud auth login --cred-file $GOOGLE_APPLICATION_CREDENTIALS --quiet
      ACCESS_TOKEN=$(/shared-cli/google-cloud-sdk/bin/gcloud auth print-access-token)
      echo "oauth2accesstoken:$ACCESS_TOKEN"
    aliyun-auth.sh: |
      #!/bin/sh
      PATH=/shared-cli:$PATH
      kubectl get secret -n argo acr-credential-secret-aggregation \
        -o jsonpath='{.data.\.dockerconfigjson}' \
        | base64 -d \
        | jq -r '.auths."container-registry.us-east-1.cr.aliyuncs.com" | "\(.Username):\(.Password)"'

serviceAccount:
  annotations:
    iam.gke.io/gcp-service-account: argocd@naturalselectionlabs.iam.gserviceaccount.com

resources:
  limits:
    cpu: "2"
    memory: 4Gi
  requests:
    cpu: "1"
    memory: 2Gi

extraEnv:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: "/etc/workload-identity/credential-configuration.json"
volumeMounts:
  - name: token
    mountPath: "/var/run/service-account"
    readOnly: true
  - name: workload-identity-credential-configuration
    mountPath: "/etc/workload-identity"
    readOnly: true
  - name: shared-cli
    mountPath: "/shared-cli"
    readOnly: true
  - name: gcloud-config
    mountPath: "/app/.config"
volumes:
  - name: token
    projected:
      sources:
        - serviceAccountToken:
            audience: https://iam.googleapis.com/projects/987979088361/locations/global/workloadIdentityPools/kubernetes/providers/aliyun-common
            expirationSeconds: 3600
            path: token
  - name: workload-identity-credential-configuration
    configMap:
      name: gcp-credential
  - name: shared-cli
    emptyDir: {}
  - name: gcloud-config
    emptyDir: {}
