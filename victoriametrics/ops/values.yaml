nameOverride: ""
fullnameOverride: "victoriametrics"
tenant: "0"
# -- If this chart is used in "Argocd" with "releaseName" field then
# -- VMServiceScrapes couldn't select the proper services.
# -- For correct working need set value 'argocdReleaseOverride=$ARGOCD_APP_NAME'
argocdReleaseOverride: ""

## -- Create default rules for monitoring the cluster
defaultRules:
  create: true
  rules:
    etcd: true
    general: true
    k8s: true
    kubeApiserver: true
    kubeApiserverAvailability: true
    kubeApiserverBurnrate: true
    kubeApiserverSlos: true
    kubelet: true
    kubePrometheusGeneral: true
    kubePrometheusNodeRecording: true
    kubernetesApps: true
    kubernetesResources: true
    kubernetesStorage: true
    kubernetesSystem: true
    kubeScheduler: true
    kubeStateMetrics: true
    network: true
    node: true
    vmagent: true
    vmsingle: true
    vmcluster: false
    vmhealth: true
    alertmanager: true

  # -- Runbook url prefix for default rules
  runbookUrl: https://runbooks.prometheus-operator.dev/runbooks
  ## Reduce app namespace alert scope
  appNamespacesTarget: ".*"

  # -- Labels for default rules
  labels: {}
  # -- Annotations for default rules
  annotations: {}

  # -- Additional labels for PrometheusRule alerts
  additionalRuleLabels: {}

## -- Create default dashboards
defaultDashboardsEnabled: true

## -- Create experimental dashboards
experimentalDashboardsEnabled: true

# Provide custom recording or alerting rules to be deployed into the cluster.
additionalVictoriaMetricsMap:
#    rule-name:
#     groups:
#     - name: my_group
#       rules:
#       - record: my_record
#         expr: 100 * my_record

victoria-metrics-operator:
  operator:
    # -- By default, operator converts prometheus-operator objects.
    disable_prometheus_converter: false
#    prometheus_converter_add_argocd_ignore_annotations: true
    enable_converter_ownership: true

# -- Configures vmsingle params
vmsingle:
  enabled: false
  # spec for VMSingle crd
  # https://docs.victoriametrics.com/operator/api.html#vmsinglespec
  spec:
    retentionPeriod: "180d"
    replicaCount: 1
    extraArgs: {}
    storage:
      storageClassName: premium-rwo
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Ti
    resources:
      requests:
        cpu: "4"
        memory: "8Gi"
      limits:
        cpu: "4"
        memory: "8Gi"

  ingress:
    enabled: true
    ingressClassName: traefik
    annotations:
      cert-manager.io/cluster-issuer: "cloudflare"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
    hosts:
      - vmsingle.naturalselectionlabs.com
    tls:
      - secretName: vmsingle-tls
        hosts:
          - vmsingle.naturalselectionlabs.com

vmcluster:
  enabled: true
  annotations: {}
  # spec for VMCluster crd
  # https://docs.victoriametrics.com/operator/api.html#vmclusterspec
  spec:
    # -- Data retention period. Possible units character: h(ours), d(ays), w(eeks), y(ears), if no unit character specified - month. The minimum retention period is 24h. See these [docs](https://docs.victoriametrics.com/single-server-victoriametrics/#retention)
    retentionPeriod: "180d"
    replicationFactor: 2
    vmstorage:
      replicaCount: 2
      storageDataPath: "/vm-data"
      extraArgs:
        cacheExpireDuration: "3h"
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: premium-rwo
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Ti
      resources:
        requests:
          cpu: "8"
          memory: "8Gi"
    vmselect:
      replicaCount: 3
      cacheMountPath: "/select-cache"
      extraArgs:
        cacheExpireDuration: "3h"
        search.maxUniqueTimeseries: "2000000"
        search.maxQueryLen: "1500000"
        search.maxSamplesPerSeries: "20000000"
        search.maxSamplesPerQuery: "20000000"
      serviceSpec:
        metadata:
          annotations:
            networking.gke.io/load-balancer-type: "Internal"
            networking.gke.io/internal-load-balancer-subnet: "prod-loadbalancer"
            networking.gke.io/internal-load-balancer-allow-global-access: "true"
        spec:
          type: LoadBalancer
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: premium-rwo
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 200Gi
      resources:
        requests:
          cpu: "2"
          memory: "4Gi"
    vminsert:
      replicaCount: 4
      extraArgs:
        cacheExpireDuration: "3h"
        maxLabelsPerTimeseries: "120"
      resources:
        requests:
          cpu: "0.5"
          memory: "512Mi"

  ingress:
    storage:
      enabled: false
    select:
      enabled: true
      ingressClassName: traefik
      annotations:
        cert-manager.io/cluster-issuer: "cloudflare"
        traefik.ingress.kubernetes.io/router.entrypoints: websecure
      hosts:
        - vmselect.naturalselectionlabs.com
      tls:
        - secretName: vmselect-tls
          hosts:
            - vmselect.naturalselectionlabs.com
    insert:
      enabled: false
      # For Kubernetes >= 1.18 you should specify the ingress-controller via the field ingressClassName
      # See https://kubernetes.io/blog/2020/04/02/improvements-to-the-ingress-api-in-kubernetes-1.18/#specifying-the-class-of-an-ingress
      # ingressClassName: nginx
      # Values can be templated
      annotations:
        {}
        # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
      labels: {}
      path: /
      # pathType is only for k8s > 1.19
      pathType: Prefix

      hosts:
        - vminsert.domain.com
      ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
      extraPaths: []
      # - path: /*
      #   backend:
      #     serviceName: ssl-redirect
      #     servicePort: use-annotation
      ## Or for k8s > 1.19
      # - path: /*
      #   pathType: Prefix
      #   backend:
      #     service:
      #       name: ssl-redirect
      #       port:
      #         name: service
      tls: []
      #  - secretName: vminsert-ingress-tls
      #    hosts:
      #      - vminsert.domain.com

alertmanager:
  enabled: true
  spec:
    configSecret: "vm-alertmanager-config"
    replicaCount: 3
    externalURL: https://alertmanager.naturalselectionlabs.com
  templateFiles:
    status.tmpl: |-
      {{ define "status.title" -}}
      [{{ .Status | toUpper -}}
       {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
      ] {{ template "__alert_severity_prefix_title" . }} {{ .CommonLabels.instance }}
      {{- end }}
  # template_2.tmpl: ""
#  ingress:
#    enabled: true
#    ingressClassName: traefik
#    annotations:
#      cert-manager.io/cluster-issuer: "cloudflare"
#      traefik.ingress.kubernetes.io/router.entrypoints: websecure
#    hosts:
#      - alertmanager.naturalselectionlabs.com
#    tls:
#      - secretName: alertmanager-tls
#        hosts:
#          - alertmanager.alertmanager.naturalselectionlabs.com

vmalert:
  enabled: true
  spec:
    replicaCount: 2
    extraArgs:
      external.url: https://grafana.naturalselectionlabs.com
    externalLabels:
      cluster_name: us-central1-ops
      region: us-central1
      provider: gcp
      zone: us-central1-a
    resources:
      requests:
        cpu: '0.5'
        memory: 512Mi
      limits:
        cpu: '0.5'
        memory: 512Mi
  ingress:
    enabled: true
    ingressClassName: traefik
    annotations:
      cert-manager.io/cluster-issuer: "cloudflare"
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
    hosts:
      - vmalert.naturalselectionlabs.com
    tls:
      - secretName: vmalert-tls
        hosts:
          - vmalert.naturalselectionlabs.com

vmagent:
  enabled: true
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: '8429'
    prometheus.io/scrape: 'true'
    iam.gke.io/gcp-service-account: vmagent@naturalselectionlabs.iam.gserviceaccount.com
  # https://docs.victoriametrics.com/operator/api.html#vmagentremotewritespec
  # defined spec will be added to the remoteWrite configuration of VMAgent
  additionalRemoteWrites:
    []
    #- url: http://some-remote-write/api/v1/write
  # spec for VMAgent crd
  # https://docs.victoriametrics.com/operator/blob/master/docs/api.MD#vmagentspec
  spec:
#    podMetadata:
#      annotations:
#        vault.hashicorp.com/agent-inject: "true"
#        vault.hashicorp.com/role: "vmagent"
#        vault.hashicorp.com/agent-inject-token: "true"
#        vault.hashicorp.com/agent-run-as-user: "65534"
#        vault.hashicorp.com/agent-run-as-group: "65534"
    selectAllByDefault: true
    image:
      tag: v1.87.1
    scrapeInterval: 25s
    externalLabels:
      cluster_name: us-central1-ops
      region: us-central1
      provider: gcp
      zone: us-central1-a
    extraArgs:
      promscrape.streamParse: "true"
      promscrape.maxScrapeSize: "67108864"
      promscrape.kubernetesSDCheckInterval: 60s
    additionalScrapeConfigs:
      key: prometheus-additional.yaml
      name: additional-scrape-configs
    resources:
      requests:
        cpu: '1'
        memory: 1Gi
      limits:
        cpu: '1'
        memory: 1Gi

grafana:
  enabled: false
  ingress:
    hosts:
      - grafana.naturalselectionlabs.com

# prometheus-node-exporter dependency chart configuration. For possible values refer to https://github.com/prometheus-community/helm-charts/blob/main/charts/prometheus-node-exporter/values.yaml
prometheus-node-exporter:
  enabled: false

  resources:
    requests:
      cpu: 0.02
      memory: 64Mi
  ## all values for prometheus-node-exporter helm chart can be specified here
  podLabels:
    ## Add the 'node-exporter' label to be used by serviceMonitor to match standard common usage in rules and grafana dashboards
    ##
    jobLabel: node-exporter
  extraArgs:
    - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
    - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$

  vmServiceScrape:
    # wheter we should create a service scrape resource for node-exporter
    enabled: true

    # spec for VMServiceScrape crd
    # https://docs.victoriametrics.com/operator/api.html#vmservicescrapespec
    spec:
      jobLabel: jobLabel
      endpoints:
        - port: metrics
          metricRelabelConfigs:
            - action: drop
              source_labels: [mountpoint]
              regex: "/var/lib/kubelet/pods.+"

# kube-state-metrics dependency chart configuration. For possible values refer to https://github.com/kubernetes/kube-state-metrics/blob/master/charts/kube-state-metrics/values.yaml
kube-state-metrics:
  enabled: true
  ## all values for kube-state-metrics helm chart can be specified here
  image:
    tag: "v2.8.0"
  nodeSelector:
    cloud.google.com/compute-class: Performance
    cloud.google.com/machine-family: c3
    cloud.google.com/pod-isolation: 50m
  resources:
    requests:
      cpu: 0.05
      memory: 100Mi
  # spec for VMServiceScrape crd
  # https://docs.victoriametrics.com/operator/api.html#vmservicescrapespec
  vmServiceScrape:
    spec: {}


#################################################
###              Service Monitors           #####
#################################################
## Component scraping the kubelets
kubelet:
  enabled: true

  # -- Enable scraping /metrics/cadvisor from kubelet's service
  cadvisor: true
  # -- Enable scraping /metrics/probes from kubelet's service
  probes: true
  # spec for VMNodeScrape crd
  # https://docs.victoriametrics.com/operator/api.html#vmnodescrapespec
  spec:
    scheme: "https"
    honorLabels: true
    interval: "30s"
    scrapeTimeout: "5s"
    tlsConfig:
      insecureSkipVerify: true
      caFile: "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    bearerTokenFile: "/var/run/secrets/kubernetes.io/serviceaccount/token"
    # drop high cardinality label and useless metrics for cadvisor and kubelet
    metricRelabelConfigs:
      - action: labeldrop
        regex: (uid)
      - action: labeldrop
        regex: (id|name)
      - action: drop
        source_labels: [__name__]
        regex: (rest_client_request_duration_seconds_bucket|rest_client_request_duration_seconds_sum|rest_client_request_duration_seconds_count)
    relabelConfigs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - sourceLabels: [__metrics_path__]
        targetLabel: metrics_path
      - targetLabel: "job"
        replacement: "kubelet"

# -- Component scraping the kube api server
kubeApiServer:
  enabled: true
  # spec for VMServiceScrape crd
  # https://docs.victoriametrics.com/operator/api.html#vmservicescrapespec
  spec:
    endpoints:
      - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
        # bearerTokenSecret:
        #   key: ""
        port: https
        scheme: https
        tlsConfig:
          caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
          serverName: kubernetes
    jobLabel: component
    namespaceSelector:
      matchNames:
        - default
    selector:
      matchLabels:
        component: apiserver
        provider: kubernetes

# -- Disable kubeControllerManager/coreDNS/kubeEtcd/kubeScheduler for GKE managed kubernetes
kubeControllerManager:
  enabled: false
coreDns:
  enabled: false
kubeEtcd:
  enabled: false
kubeScheduler:
  enabled: false